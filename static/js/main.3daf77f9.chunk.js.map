{"version":3,"sources":["components/Blob.tsx","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Blob","props","style","transition","WebkitTransition","MozTransition","OTransition","cx","position","x","cy","y","r","fill","getRandomPos","width","height","mainBlobR","blobs","i","push","getRandomNumber","id","min","max","Math","random","getMagnitude","sqrt","window","innerWidth","innerHeight","initialSizeMainBlob","App","svg","state","mainBlob","blobsPositions","createRef","this","setPositionUpdater","forEach","pos","index","eats","splice","setState","pt","svgElement","current","screenCTM","getScreenCTM","loc","matrixTransform","inverse","normalized","magnitude","normalize","prevState","point","createSVGPoint","document","onmousemove","e","clientX","clientY","ontouchmove","touches","setInterval","updatePosition","other","top","bottom","left","right","backgroundColor","ref","transform","map","blob","key","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3daf77f9.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {BlobData} from \"../utils\";\r\n\r\nconst Blob = (props: BlobData) => {\r\n    const transition = {\r\n        transition: \"r 0.2s ease-in-out\",\r\n        WebkitTransition: \"r 0.2s ease-in-out\",\r\n        MozTransition: \"r 0.2s ease-in-out\",\r\n        OTransition: \"r 0.2s ease-in-out\"\r\n    };\r\n    return <circle style={transition} cx={props.position.x} cy={props.position.y} r={props.r} fill={\"white\"}/>\r\n};\r\n\r\nexport default Blob;","export interface Position {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface BlobData {\r\n    position: Position,\r\n    r: number,\r\n    id: number\r\n}\r\n\r\nexport function getRandomPos(width: number, height: number, mainBlobR: number): BlobData[] {\r\n    let blobs = [];\r\n    for (let i = 1; i < 200; ++i) {\r\n        blobs.push({position: {x: getRandomNumber(-2* width, 2* width), y: getRandomNumber(-2*height, 2*height)}, r: getRandomNumber(10, mainBlobR - 10), id: i});\r\n    }\r\n    return blobs;\r\n}\r\n\r\nexport function getRandomNumber(min: number, max: number): number {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function getMagnitude(x: number, y: number): number {\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\nexport function normalize(x: number, y: number): Position {\r\n    let magnitude = getMagnitude(x, y);\r\n    if (magnitude > 0) {\r\n        magnitude = magnitude / 5;\r\n        return {x: x / magnitude, y: y / magnitude};\r\n    } else {\r\n        return {x: x, y: y}\r\n    }\r\n}","import React, {createRef, RefObject} from 'react';\r\nimport './App.css';\r\nimport Blob from \"./components/Blob\";\r\nimport {BlobData, getMagnitude, getRandomPos, normalize} from \"./utils\";\r\n\r\ninterface AppState {\r\n    mainBlob: BlobData,\r\n    blobsPositions: BlobData[]\r\n}\r\n\r\nconst width = window.innerWidth;\r\nconst height = window.innerHeight;\r\nconst initialSizeMainBlob = 50;\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n    svg: RefObject<SVGSVGElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            mainBlob: {\r\n                position: {\r\n                    x: 0,\r\n                    y: 0\r\n                },\r\n                r: initialSizeMainBlob,\r\n                id: 0\r\n            },\r\n            blobsPositions: getRandomPos(width, height, initialSizeMainBlob)\r\n        };\r\n        this.svg = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setPositionUpdater();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.state.blobsPositions.forEach((pos: BlobData, index: number) => {\r\n            if (this.eats(pos)) {\r\n                const blobs = this.state.blobsPositions;\r\n                blobs.splice(index, 1);\r\n                this.setState({blobsPositions: blobs});\r\n            }\r\n        });\r\n    }\r\n\r\n    updatePosition(pt: DOMPoint): void {\r\n        const {mainBlob} = this.state;\r\n        const svgElement = this.svg.current;\r\n        if (svgElement) {\r\n            const screenCTM = svgElement.getScreenCTM();\r\n            if (screenCTM) {\r\n                const loc = pt.matrixTransform(screenCTM.inverse());\r\n                const normalized = normalize(loc.x - width / 2, loc.y - height / 2);\r\n                this.setState(prevState => ({\r\n                    mainBlob: {\r\n                        ...prevState.mainBlob,\r\n                        position: {\r\n                            x: mainBlob.position.x + normalized.x,\r\n                            y: mainBlob.position.y + normalized.y\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    setPositionUpdater() {\r\n        if (this.svg.current) {\r\n            let point = this.svg.current.createSVGPoint();\r\n            document.onmousemove = (e) => {\r\n                point.x = e.clientX;\r\n                point.y = e.clientY;\r\n            };\r\n            document.ontouchmove = (e) => {\r\n                point.x = e.touches[0].clientX;\r\n                point.y = e.touches[0].clientY;\r\n            };\r\n            setInterval(() => this.updatePosition(point), 20);\r\n        }\r\n    }\r\n\r\n    eats(other: BlobData): boolean {\r\n        const {mainBlob} = this.state;\r\n        const distance = getMagnitude(mainBlob.position.x - other.position.x, mainBlob.position.y - other.position.y);\r\n        if (distance < mainBlob.r + other.r) {\r\n            this.setState(prevState => ({\r\n                mainBlob: {\r\n                    ...prevState.mainBlob,\r\n                    r: getMagnitude(mainBlob.r, other.r)\r\n                }\r\n            }));\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const fullScreen = {\r\n            position: \"fixed\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'black'\r\n        } as React.CSSProperties;\r\n\r\n        const transition = {\r\n            transition: \"all 0.5s ease-in-out\",\r\n            WebkitTransition: \"all 0.5s ease-in-out\",\r\n            MozTransition: \"all 0.5s ease-in-out\",\r\n            OTransition: \"all 0.5s ease-in-out\"\r\n        };\r\n\r\n        const {mainBlob, blobsPositions} = this.state;\r\n\r\n        return (\r\n            <svg style={fullScreen} ref={this.svg} width={width} height={height}>\r\n                <g style={transition}\r\n                   transform={`translate(${width / 2}, ${height / 2}), scale(${initialSizeMainBlob / mainBlob.r})`}>\r\n                    <g transform={`translate(${-mainBlob.position.x}, ${-mainBlob.position.y})`}>\r\n                        <Blob id={mainBlob.id} position={{x: mainBlob.position.x, y: mainBlob.position.y}}\r\n                              r={mainBlob.r}/>\r\n                        {blobsPositions.map((blob: BlobData) =>\r\n                            <Blob id={blob.id} position={{\r\n                                x: blob.position.x,\r\n                                y: blob.position.y\r\n                            }} r={blob.r} key={blob.id}/>)}\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}