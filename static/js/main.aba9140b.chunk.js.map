{"version":3,"sources":["components/Blob.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Blob","style","transition","WebkitTransition","MozTransition","OTransition","cx","this","props","x","cy","y","r","fill","React","width","window","innerWidth","height","innerHeight","App","svg","state","pointX","pointY","blobsPositions","getRandomPos","createRef","min","max","Math","random","sqrt","m","mag","pt","loc","matrixTransform","current","getScreenCTM","inverse","normalized","normalize","setState","setPositionUpdater","blobs","i","push","getRandomNumber","id","createSVGPoint","document","onmousemove","e","clientX","clientY","ontouchmove","touches","setInterval","updatePosition","other","sum","PI","className","position","top","bottom","left","right","backgroundColor","ref","transform","map","pos","index","eats","splice","key","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aba9140b.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface BlobProps {\r\n    r: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nclass Blob extends React.Component<BlobProps, {}> {\r\n\r\n    render() {\r\n        const transition = {\r\n            transition: \"r 0.2s ease-in-out\",\r\n            WebkitTransition: \"r 0.2s ease-in-out\",\r\n            MozTransition: \"r 0.2s ease-in-out\",\r\n            OTransition: \"r 0.2s ease-in-out\"\r\n        };\r\n        return <circle style={transition} cx={this.props.x} cy={this.props.y} r={this.props.r} fill={\"white\"}/>\r\n    }\r\n\r\n}\r\n\r\nexport default Blob;","import React, {createRef} from 'react';\nimport './App.css';\nimport Blob from \"./components/Blob\";\n\ninterface Position {\n    x: number,\n    y: number,\n    id: number\n}\n\ninterface AppState {\n    pointX: number,\n    pointY: number,\n    r: number,\n    blobsPositions: Position[]\n}\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nclass App extends React.Component<{}, AppState> {\n\n    svg: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            pointX: 0,\n            pointY: 0,\n            r: 50,\n            blobsPositions: this.getRandomPos()\n        };\n        this.svg = createRef();\n    }\n\n    getRandomNumber(min: number, max: number): number {\n        return Math.random() * (max - min) + min;\n    }\n\n    mag(x: number, y: number) {\n        return Math.sqrt(x * x + y * y);\n    };\n\n    normalize(x: number, y: number): { x: number, y: number } {\n        let m = this.mag(x, y);\n        if (m > 0) {\n            m = m / 2;\n            return {x: x / m, y: y / m};\n        } else {\n            return {x: x, y: y}\n        }\n    };\n\n    updatePosition(pt: any) {\n        const loc = pt.matrixTransform(this.svg.current.getScreenCTM().inverse());\n        const normalized = this.normalize(loc.x - width / 2, loc.y - height / 2);\n        this.setState({pointX: this.state.pointX + normalized.x, pointY: this.state.pointY + normalized.y});\n    }\n\n    componentDidMount() {\n        this.setPositionUpdater();\n    }\n\n    getRandomPos() {\n        let blobs = [];\n        for (let i = 0; i < 100; ++i) {\n            blobs.push({x: this.getRandomNumber(-width, width), y: this.getRandomNumber(-height, height), id: i});\n        }\n        return blobs;\n    }\n\n    setPositionUpdater() {\n        let pt = this.svg.current.createSVGPoint();\n        document.onmousemove = (e) => {\n            pt.x = e.clientX;\n            pt.y = e.clientY;\n        };\n        document.ontouchmove = (e) => {\n            pt.x = e.touches[0].clientX;\n            pt.y = e.touches[0].clientY;\n        };\n        setInterval(() => this.updatePosition(pt), 20);\n    }\n\n    eats(other: Position) {\n        const d = Math.sqrt((this.state.pointX - other.x) * (this.state.pointX - other.x) + (this.state.pointY - other.y) * (this.state.pointY - other.y));\n        if (d < this.state.r + 10) {\n            const sum = Math.PI * this.state.r * this.state.r + Math.PI * 10 * 10;\n            this.setState({r: Math.sqrt(sum / Math.PI)});\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    render() {\n\n        const fullScreen = {\n            position: \"fixed\",\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            backgroundColor: 'black'\n        } as React.CSSProperties;\n\n        const transition = {\n            transition: \"all 0.5s ease-in-out\",\n            WebkitTransition: \"all 0.5s ease-in-out\",\n            MozTransition: \"all 0.5s ease-in-out\",\n            OTransition: \"all 0.5s ease-in-out\"\n        };\n\n        return (\n            <div className=\"App\">\n                <svg style={fullScreen} ref={this.svg} width={width} height={height}>\n                    <g style={transition}\n                       transform={`translate(${width / 2}, ${height / 2}), scale(${50 / this.state.r})`}>\n                        <g transform={`translate(${-this.state.pointX}, ${-this.state.pointY})`}>\n                            <Blob x={this.state.pointX} y={this.state.pointY} r={this.state.r}/>\n                            {this.state.blobsPositions.map((pos: Position, index: number) => {\n                                if (this.eats(pos)) {\n                                    const blobs = this.state.blobsPositions;\n                                    blobs.splice(index, 1);\n                                    this.setState({blobsPositions: blobs});\n                                }\n                                return <Blob x={pos.x} y={pos.y} r={10} key={index}/>\n                            })}\n                        </g>\n                    </g>\n                </svg>\n            </div>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}